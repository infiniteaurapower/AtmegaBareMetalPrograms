//High level arduino library code

#include <Wire.h>

void setup() {
  Serial.begin(9600);
  Wire.begin();
}

void loop() {
  Wire.beginTransmission(8);
  Wire.write("Hello!");
  Wire.endTransmission();
  Wire.requestFrom(8, 7);
  while (Wire.available()) {
    Serial.print((char)Wire.read());
  }
  Serial.println("");
  delay(1000);
}


//Bare metal code

#include <avr/io.h>
#include <avr/interrupt.h>

#define F_CPU 16000000UL
#define I2C_SLAVE_ADDR 0x08

void i2c_init(uint8_t bitrate_div) {
    TWBR = bitrate_div;
    TWSR = 0;
    TWCR = (1 << TWEN);
}

void i2c_start(void) {
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    while (!(TWCR & (1 << TWINT)));
}

void i2c_stop(void) {
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
}

void i2c_write(uint8_t data) {
    TWDR = data;
    TWCR = (1 << TWINT) | (1 << TWEN);
    while (!(TWCR & (1 << TWINT)));
}

uint8_t i2c_read(uint8_t ack) {
    TWCR = (1 << TWINT) | (1 << TWEN) | (ack ? (1 << TWEA) : 0);
    while (!(TWCR & (1 << TWINT)));
    return TWDR;
}

int main() {
    uint8_t i;
    const char message[] = "Hello!";
    char response[16];
    DDRC &= ~((1 << PC4) | (1 << PC5));
    i2c_init(72);
    while (1) {
        i2c_start();
        i2c_write((I2C_SLAVE_ADDR << 1) | 0);
        for (i = 0; message[i]; i++) {
            i2c_write(message[i]);
        }
        i2c_stop();
        i2c_start();
        i2c_write((I2C_SLAVE_ADDR << 1) | 1);
        for (i = 0; i < sizeof(response) - 1; i++) {
            response[i] = i2c_read(i < sizeof(response) - 2);
        }
        response[i] = 0;
        i2c_stop();
    }
    return 0;
}
